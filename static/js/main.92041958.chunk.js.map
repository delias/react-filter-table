{"version":3,"sources":["components/FilterButtons.js","components/FilterInput.js","components/RowTable.js","components/ShowTable.js","App.js","serviceWorker.js","index.js"],"names":["FilterButtons","_ref","filter","handleClick","e","value","target","dataset","sex","react_default","a","createElement","onClick","className","data-sex","FilterInput","filterInput","type","name","id","placeholder","onKeyUp","RowTable","props","nombres","apellidos","sexo","ShowTable","rows","data","map","item","key","Num","Nombres","Apellidos","Sexo","getDataFromServer","Object","asyncToGenerator","regenerator_default","mark","_callee","endpoint","wrap","_context","prev","next","fetch","method","headers","Accept","Content-Type","then","response","ok","Error","statusText","json","abrupt","sent","stop","_x","apply","this","arguments","App","_useState","useState","_useState2","slicedToArray","setData","_useState3","_useState4","filteredData","setFilteredData","useEffect","toLowerCase","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92041958.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function FilterButtons({ filter }) {\n  function handleClick(e) {\n    // console.log(e.target);\n    const value = e.target.dataset.sex;\n    filter(value);\n  }\n  return (\n    <div>\n      <button onClick={handleClick} className=\"sex-filter\" data-sex=\"M\">\n        Male\n      </button>\n      <button onClick={handleClick} className=\"sex-filter\" data-sex=\"F\">\n        Female\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function FilterInput({ filterInput }) {\n  function handleChange(e) {\n    const value = e.target.value;\n    // console.log(value);\n    filterInput(value);\n  }\n  return (\n    <div>\n      <input\n        type=\"text\"\n        name=\"text\"\n        id=\"textFilter\"\n        placeholder=\"Search...\"\n        onKeyUp={handleChange}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function RowTable(props) {\n  const nombres = props.nombres;\n  const apellidos = props.apellidos;\n  const sexo = props.sexo;\n  return (\n    <tr>\n      <td>{nombres}</td>\n      <td>{apellidos}</td>\n      <td>{sexo}</td>\n    </tr>\n  );\n}\n","import React from \"react\";\nimport RowTable from \"./RowTable\";\n\nexport default function ShowTable(props) {\n  const data = props.data;\n  // console.log(data);\n  let rows = data.map(item => {\n    return (\n      <RowTable\n        key={item.Num}\n        nombres={item.Nombres}\n        apellidos={item.Apellidos}\n        sexo={item.Sexo}\n      />\n    );\n  });\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th>firstname</th>\n            <th>lastname</th>\n            <th>sex</th>\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </table>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport FilterButtons from \"./components/FilterButtons\";\nimport FilterInput from \"./components/FilterInput\";\nimport ShowTable from \"./components/ShowTable\";\n\nconst getDataFromServer = async function(endpoint) {\n  let data = fetch(endpoint, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (!response.ok) throw Error(response.statusText);\n      return response;\n    })\n    .then(response => response.json());\n\n  return await data;\n};\nfunction App() {\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n\n  useEffect(() => {\n    let endpoint = \"/race.json\";\n    getDataFromServer(endpoint).then(data => {\n      setData(data);\n      setFilteredData(data);\n    });\n  }, []);\n\n  function filter(value) {\n    // console.log(\"Filter function\", value);\n    setFilteredData(data.filter(item => item.Sexo === value));\n    // console.log(filteredData);\n  }\n\n  function filterInput(value) {\n    setFilteredData(\n      data.filter(\n        item => item.Nombres.toLowerCase().indexOf(value.toLowerCase()) !== -1\n      )\n    );\n  }\n\n  return (\n    <div>\n      <h1>Race Results</h1>\n      <FilterButtons filter={filter} />\n      <FilterInput filterInput={filterInput} />\n      <ShowTable data={filteredData} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}